// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PythonBasicProject PythonBasicProject synthesizes correctly with custom dependencies 1`] = `
{
  ".coveragerc": "[run]
branch = true
omit = 
  

[report]
fail_under = 80
format = text
skip_empty = true
skip_covered = false",
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/Makefile-projen
!/.nvmrc
!/mypy.ini
.mypy_cache
!/ruff.toml
.ruff_cache
.audit_cache
!/pytest.ini
!/.coveragerc
.coverage
.pytest_cache
!/pyproject.toml
.venv/
*.egg-info
build
*.pyc
__pycache__
.cache
!/.python-version
.ipynb_checkpoints
!/.projenrc.py
",
  ".nvmrc": "20.16.0",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "dev-package1",
        "type": "devenv",
        "version": "==1.0.0",
      },
      {
        "name": "dev-package2",
        "type": "devenv",
        "version": "==2.0.0",
      },
      {
        "name": "mypy",
        "type": "devenv",
        "version": "1.14.*",
      },
      {
        "name": "pip-audit",
        "type": "devenv",
        "version": "2.*",
      },
      {
        "name": "pip-tools",
        "type": "devenv",
        "version": "7.4.1",
      },
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "pytest-cov",
        "type": "devenv",
        "version": "6.0.*",
      },
      {
        "name": "pytest",
        "type": "devenv",
        "version": "8.3.*",
      },
      {
        "name": "ruff",
        "type": "devenv",
        "version": "0.8.*",
      },
      {
        "name": "package1",
        "type": "runtime",
        "version": "==1.0.0",
      },
      {
        "name": "package2",
        "type": "runtime",
        "version": "==2.0.0",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".coveragerc",
      ".gitattributes",
      ".gitignore",
      ".nvmrc",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".python-version",
      "Makefile-projen",
      "mypy.ini",
      "pyproject.toml",
      "pytest.ini",
      "ruff.toml",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "VENV_PATH": ".venv",
    },
    "tasks": {
      "build": {
        "description": "Build project (install -> compile -> package)",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "install",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Compile project",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": ".venv/bin/python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies",
        "name": "install",
        "steps": [
          {
            "spawn": "install-dev",
          },
        ],
      },
      "install-dev": {
        "description": "Install dependencies from constraints-dev.txt (including dev deps)",
        "name": "install-dev",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints-dev.txt --editable .[dev]",
          },
        ],
      },
      "lint": {
        "description": "Lint project (code style, formatting, audit, code smells etc)",
        "name": "lint",
        "steps": [
          {
            "spawn": "lint-mypy",
          },
          {
            "spawn": "lint-ruff",
          },
          {
            "spawn": "lint-audit",
          },
        ],
      },
      "lint-audit": {
        "description": "Code type checks (mypy)",
        "name": "lint-audit",
        "steps": [
          {
            "exec": ".venv/bin/pip-audit --cache-dir .cache/.audit_cache",
          },
        ],
      },
      "lint-fix": {
        "description": "Fix auto fixable lint issues",
        "name": "lint-fix",
        "steps": [
          {
            "spawn": "lint-ruff-fix",
          },
        ],
      },
      "lint-mypy": {
        "description": "Code type checks (mypy)",
        "name": "lint-mypy",
        "steps": [
          {
            "exec": ".venv/bin/mypy src tests",
          },
        ],
      },
      "lint-ruff": {
        "description": "Code checks (RUFF)",
        "name": "lint-ruff",
        "steps": [
          {
            "exec": ".venv/bin/ruff format --check src tests",
          },
          {
            "exec": ".venv/bin/ruff check src tests",
          },
        ],
      },
      "lint-ruff-fix": {
        "description": "Lint fix (RUFF)",
        "name": "lint-ruff-fix",
        "steps": [
          {
            "exec": ".venv/bin/ruff format src tests",
          },
          {
            "exec": ".venv/bin/ruff check --fix src tests",
          },
        ],
      },
      "package": {
        "description": "Prepare a distributable package",
        "name": "package",
      },
      "prepare-venv": {
        "description": "Create python virtual environment in .venv",
        "name": "prepare-venv",
        "steps": [
          {
            "exec": "python -m venv .venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.13",
          },
        ],
      },
      "release": {
        "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
        "name": "release",
        "steps": [
          {
            "spawn": "release:before",
          },
          {
            "spawn": "release:next-tag",
          },
          {
            "spawn": "release:generate",
          },
          {
            "spawn": "release:after",
          },
        ],
      },
      "release:after": {
        "description": "Executed after all release tasks. Placeholder for customizations",
        "name": "release:after",
      },
      "release:before": {
        "description": "Executed before any release tasks. Placeholder for customizations",
        "name": "release:before",
      },
      "release:generate": {
        "description": "Generates documentation, special files etc. Placeholder for customizations",
        "name": "release:generate",
      },
      "release:next-tag": {
        "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"",
        "name": "release:next-tag",
        "steps": [
          {
            "exec": "npx -y monotag@1.15.1 notes ",
          },
        ],
      },
      "release:pre": {
        "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
        "name": "release:pre",
        "steps": [
          {
            "spawn": "release:pre:before",
          },
          {
            "spawn": "release:pre:next-tag",
          },
          {
            "spawn": "release:pre:generate",
          },
          {
            "spawn": "release:pre:after",
          },
        ],
      },
      "release:pre:after": {
        "description": "Executed after all release tasks. Placeholder for customizations",
        "name": "release:pre:after",
      },
      "release:pre:before": {
        "description": "Executed before any release tasks. Placeholder for customizations",
        "name": "release:pre:before",
      },
      "release:pre:generate": {
        "description": "Generates documentation, special files etc. Placeholder for customizations",
        "name": "release:pre:generate",
      },
      "release:pre:next-tag": {
        "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"",
        "name": "release:pre:next-tag",
        "steps": [
          {
            "exec": "npx -y monotag@1.15.1 notes --prerelease="true"",
          },
        ],
      },
      "test": {
        "description": "Test project",
        "name": "test",
        "steps": [
          {
            "spawn": "test-unit",
          },
        ],
      },
      "test-unit": {
        "description": "Unit tests (pytest)",
        "name": "test-unit",
        "steps": [
          {
            "exec": ".venv/bin/pytest",
          },
        ],
      },
      "update-lockfile": {
        "description": "Update lock file (constraints.txt) according to pyproject.toml",
        "name": "update-lockfile",
        "steps": [
          {
            "say": "Prepare venv",
            "spawn": "prepare-venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=constraints.txt pyproject.toml",
            "say": "Updating lock file (runtime)",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=constraints-dev.txt pyproject.toml",
            "say": "Updating lock file (dev)",
          },
        ],
      },
    },
  },
  ".python-version": "3.12",
  "Makefile": "SHELL := /bin/bash

## Inherit targets from another Makefile
%:
	make -f Makefile-projen $@

dev-sample:
	@echo "This is a sample target. Edit the Makefile to add your own targets."

",
  "Makefile-projen": "SHELL := /bin/bash

all: build lint test

prepare:
	brew install nvm
	@echo "Configure your shell following the instructions at https://formulae.brew.sh/formula/nvm"
  

prepare-projen:
	@if [ "$$CI" == "true" ]; then 		set -x; npm install --no-save --no-package-lock ts-node@10.9.2 projen@0.91.13; 	else 		set -x; npm install --no-save ts-node@10.9.2 projen@0.91.13; 	fi

# Remove projen from the project
eject:
	npx projen eject

# Build project (install -> compile -> package)
build:
	npx projen build

# Install project dependencies
install:
	npx projen install

# Compile project
compile:
	npx projen compile

# Prepare a distributable package
package:
	npx projen package

# Lint project (code style, formatting, audit, code smells etc)
lint:
	npx projen lint

# Fix auto fixable lint issues
lint-fix:
	npx projen lint-fix

# Test project
test:
	npx projen test

# Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.
release:
	npx projen release

# Executed before any release tasks. Placeholder for customizations
release-before:
	npx projen release:before

# Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"
release-next-tag:
	npx projen release:next-tag

# Generates documentation, special files etc. Placeholder for customizations
release-generate:
	npx projen release:generate

# Executed after all release tasks. Placeholder for customizations
release-after:
	npx projen release:after

# Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.
release-pre:
	npx projen release:pre

# Code type checks (mypy)
lint-mypy:
	npx projen lint-mypy

# Code checks (RUFF)
lint-ruff:
	npx projen lint-ruff

# Lint fix (RUFF)
lint-ruff-fix:
	npx projen lint-ruff-fix

# Code type checks (mypy)
lint-audit:
	npx projen lint-audit

# Unit tests (pytest)
test-unit:
	npx projen test-unit

# Install dependencies from constraints-dev.txt (including dev deps)
install-dev:
	npx projen install-dev

# Create python virtual environment in .venv
prepare-venv:
	npx projen prepare-venv

# Update lock file (constraints.txt) according to pyproject.toml
update-lockfile:
	npx projen update-lockfile

",
  "mypy.ini": "[mypy]
mypy_path = 
    src
    tests
warn_return_any = True
warn_unreachable = True
warn_redundant_casts = True
warn_unused_ignores = True
pretty = True
cache_dir = .cache/.mypy_cache
",
  "pyproject.toml": "[build-system]
requires = [ "setuptools" ]
build-backend = "setuptools.build_meta"

[project]
name = "test-project"
version = "0.0.1"
description = ""
readme = ""
requires-python = ">=3.12"
license = { file = "LICENSE" }
keywords = [ ]
dependencies = [
  "dev-package1==1.0.0",
  "dev-package2==2.0.0",
  "mypy==1.14.*",
  "pip-audit==2.*",
  "pip-tools==7.4.1",
  "projen==99.99.99",
  "pytest-cov==6.0.*",
  "pytest==8.3.*",
  "ruff==0.8.*",
  "package1==1.0.0",
  "package2==2.0.0"
]

[project.optional-dependencies]
dev = [ ]

[tool.setuptools.package-data]
test-project = [ "py.typed" ]
",
  "pytest.ini": "[pytest]
cache_dir = .cache/.pytest_cache
addopts = --cov=src --verbose
testpaths =
    tests
    integration
",
  "ruff.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

cache-dir = ".cache/.ruff_cache"
show-fixes = true
src = [ "src", "tests" ]
target-version = "py313"
unsafe-fixes = false

[format]
docstring-code-format = true

[lint]
ignore = [ ]
select = [ ]
per-file-ignores = { }

  [lint.mccabe]
  max-complexity = 14
",
  "src/hello_world/__init__.py": "",
  "src/hello_world/hello.py": """"Says hello to the given name."""
def say(name: str) -> str:
              """Return a greeting message.
              Args:
                  name (str): Name to greet.
              Returns:
                  str: greeting message
              """
              return f"Hello {name}!"
          ",
  "src/hello_world/py.typed": "",
  "tests/hello_world/test_hello_world.py": "from hello_world import hello

def test_hello_with_name():
    assert hello.say("Alice") == "Hello Alice!"

def test_hello_with_empty_string():
    assert hello.say("") == "Hello !"

def test_hello_with_special_characters():
    assert hello.say("!@#$") == "Hello !@#$!"
          ",
}
`;

exports[`PythonBasicProject PythonBasicProject synthesizes correctly with custom options 1`] = `
{
  ".coveragerc": "[run]
branch = true
omit = 
  

[report]
fail_under = 11
format = text
skip_empty = true
skip_covered = false",
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/Makefile-projen
!/.nvmrc
!/mypy.ini
.mypy_cache
!/ruff.toml
.ruff_cache
.audit_cache
!/pytest.ini
!/.coveragerc
.coverage
.pytest_cache
!/pyproject.toml
!/LICENSE
.venv/
*.egg-info
build
*.pyc
__pycache__
.cache
!/.python-version
.ipynb_checkpoints
!/.projenrc.py
",
  ".nvmrc": "20.16.0",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "mypy",
        "type": "devenv",
        "version": "1.14.*",
      },
      {
        "name": "pip-audit",
        "type": "devenv",
        "version": "2.*",
      },
      {
        "name": "pip-tools",
        "type": "devenv",
        "version": "7.4.1",
      },
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "pytest-cov",
        "type": "devenv",
        "version": "6.0.*",
      },
      {
        "name": "pytest",
        "type": "devenv",
        "version": "8.3.*",
      },
      {
        "name": "ruff",
        "type": "devenv",
        "version": "0.8.*",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".coveragerc",
      ".gitattributes",
      ".gitignore",
      ".nvmrc",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".python-version",
      "LICENSE",
      "Makefile-projen",
      "mypy.ini",
      "pyproject.toml",
      "pytest.ini",
      "ruff.toml",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "VENV_PATH": ".venv",
    },
    "tasks": {
      "build": {
        "description": "Build project (install -> compile -> package)",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "install",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Compile project",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": ".venv/bin/python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies",
        "name": "install",
        "steps": [
          {
            "spawn": "install-dev",
          },
        ],
      },
      "install-dev": {
        "description": "Install dependencies from constraints-dev.txt (including dev deps)",
        "name": "install-dev",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints-dev.txt --editable .[dev]",
          },
        ],
      },
      "lint": {
        "description": "Lint project (code style, formatting, audit, code smells etc)",
        "name": "lint",
        "steps": [
          {
            "spawn": "lint-mypy",
          },
          {
            "spawn": "lint-ruff",
          },
          {
            "spawn": "lint-audit",
          },
        ],
      },
      "lint-audit": {
        "description": "Code type checks (mypy)",
        "name": "lint-audit",
        "steps": [
          {
            "exec": ".venv/bin/pip-audit --cache-dir .cache/.audit_cache",
          },
        ],
      },
      "lint-fix": {
        "description": "Fix auto fixable lint issues",
        "name": "lint-fix",
        "steps": [
          {
            "spawn": "lint-ruff-fix",
          },
        ],
      },
      "lint-mypy": {
        "description": "Code type checks (mypy)",
        "name": "lint-mypy",
        "steps": [
          {
            "exec": ".venv/bin/mypy src tests",
          },
        ],
      },
      "lint-ruff": {
        "description": "Code checks (RUFF)",
        "name": "lint-ruff",
        "steps": [
          {
            "exec": ".venv/bin/ruff format --check src tests",
          },
          {
            "exec": ".venv/bin/ruff check src tests",
          },
        ],
      },
      "lint-ruff-fix": {
        "description": "Lint fix (RUFF)",
        "name": "lint-ruff-fix",
        "steps": [
          {
            "exec": ".venv/bin/ruff format src tests",
          },
          {
            "exec": ".venv/bin/ruff check --fix src tests",
          },
        ],
      },
      "package": {
        "description": "Prepare a distributable package",
        "name": "package",
      },
      "prepare-venv": {
        "description": "Create python virtual environment in .venv",
        "name": "prepare-venv",
        "steps": [
          {
            "exec": "python -m venv .venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.13",
          },
        ],
      },
      "release": {
        "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
        "name": "release",
        "steps": [
          {
            "spawn": "release:before",
          },
          {
            "spawn": "release:next-tag",
          },
          {
            "spawn": "release:generate",
          },
          {
            "spawn": "release:after",
          },
        ],
      },
      "release:after": {
        "description": "Executed after all release tasks. Placeholder for customizations",
        "name": "release:after",
      },
      "release:before": {
        "description": "Executed before any release tasks. Placeholder for customizations",
        "name": "release:before",
      },
      "release:generate": {
        "description": "Generates documentation, special files etc. Placeholder for customizations",
        "name": "release:generate",
      },
      "release:next-tag": {
        "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"",
        "name": "release:next-tag",
        "steps": [
          {
            "exec": "npx -y monotag@1.15.1 notes ",
          },
        ],
      },
      "release:pre": {
        "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
        "name": "release:pre",
        "steps": [
          {
            "spawn": "release:pre:before",
          },
          {
            "spawn": "release:pre:next-tag",
          },
          {
            "spawn": "release:pre:generate",
          },
          {
            "spawn": "release:pre:after",
          },
        ],
      },
      "release:pre:after": {
        "description": "Executed after all release tasks. Placeholder for customizations",
        "name": "release:pre:after",
      },
      "release:pre:before": {
        "description": "Executed before any release tasks. Placeholder for customizations",
        "name": "release:pre:before",
      },
      "release:pre:generate": {
        "description": "Generates documentation, special files etc. Placeholder for customizations",
        "name": "release:pre:generate",
      },
      "release:pre:next-tag": {
        "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"",
        "name": "release:pre:next-tag",
        "steps": [
          {
            "exec": "npx -y monotag@1.15.1 notes --prerelease="true"",
          },
        ],
      },
      "test": {
        "description": "Test project",
        "name": "test",
        "steps": [
          {
            "spawn": "test-unit",
          },
        ],
      },
      "test-unit": {
        "description": "Unit tests (pytest)",
        "name": "test-unit",
        "steps": [
          {
            "exec": ".venv/bin/pytest",
          },
        ],
      },
      "update-lockfile": {
        "description": "Update lock file (lock.txt) according to pyproject.toml",
        "name": "update-lockfile",
        "steps": [
          {
            "say": "Prepare venv",
            "spawn": "prepare-venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=lock.txt pyproject.toml",
            "say": "Updating lock file (runtime)",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=constraints-dev.txt pyproject.toml",
            "say": "Updating lock file (dev)",
          },
        ],
      },
    },
  },
  ".python-version": "3.12",
  "LICENSE": "Copyright (c) 2025 Unknown

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
",
  "Makefile": "SHELL := /bin/bash

## Inherit targets from another Makefile
%:
	make -f Makefile-projen $@

dev-sample:
	@echo "This is a sample target. Edit the Makefile to add your own targets."

",
  "Makefile-projen": "SHELL := /bin/bash

all: build lint test

prepare:
	brew install nvm
	@echo "Configure your shell following the instructions at https://formulae.brew.sh/formula/nvm"
  

prepare-projen:
	@if [ "$$CI" == "true" ]; then 		set -x; npm install --no-save --no-package-lock ts-node@10.9.2 projen@0.91.13; 	else 		set -x; npm install --no-save ts-node@10.9.2 projen@0.91.13; 	fi

# Remove projen from the project
eject:
	npx projen eject

# Build project (install -> compile -> package)
build:
	npx projen build

# Install project dependencies
install:
	npx projen install

# Compile project
compile:
	npx projen compile

# Prepare a distributable package
package:
	npx projen package

# Lint project (code style, formatting, audit, code smells etc)
lint:
	npx projen lint

# Fix auto fixable lint issues
lint-fix:
	npx projen lint-fix

# Test project
test:
	npx projen test

# Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.
release:
	npx projen release

# Executed before any release tasks. Placeholder for customizations
release-before:
	npx projen release:before

# Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"
release-next-tag:
	npx projen release:next-tag

# Generates documentation, special files etc. Placeholder for customizations
release-generate:
	npx projen release:generate

# Executed after all release tasks. Placeholder for customizations
release-after:
	npx projen release:after

# Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.
release-pre:
	npx projen release:pre

# Code type checks (mypy)
lint-mypy:
	npx projen lint-mypy

# Code checks (RUFF)
lint-ruff:
	npx projen lint-ruff

# Lint fix (RUFF)
lint-ruff-fix:
	npx projen lint-ruff-fix

# Code type checks (mypy)
lint-audit:
	npx projen lint-audit

# Unit tests (pytest)
test-unit:
	npx projen test-unit

# Install dependencies from constraints-dev.txt (including dev deps)
install-dev:
	npx projen install-dev

# Create python virtual environment in .venv
prepare-venv:
	npx projen prepare-venv

# Update lock file (lock.txt) according to pyproject.toml
update-lockfile:
	npx projen update-lockfile

",
  "mypy.ini": "[mypy]
mypy_path = 
    src
    tests
warn_return_any = True
warn_unreachable = True
warn_redundant_casts = True
warn_unused_ignores = True
pretty = True
cache_dir = .cache/.mypy_cache
",
  "pyproject.toml": "[build-system]
requires = [ "setuptools" ]
build-backend = "setuptools.build_meta"

[project]
name = "test-project"
version = "0.0.1"
description = ""
readme = ""
requires-python = ">=3.12"
license = { file = "LICENSE" }
keywords = [ ]
dependencies = [
  "mypy==1.14.*",
  "pip-audit==2.*",
  "pip-tools==7.4.1",
  "projen==99.99.99",
  "pytest-cov==6.0.*",
  "pytest==8.3.*",
  "ruff==0.8.*"
]

[project.optional-dependencies]
dev = [ ]

[tool.setuptools.package-data]
test-project = [ "py.typed" ]
",
  "pytest.ini": "[pytest]
cache_dir = .cache/.pytest_cache
addopts = --cov=src --verbose
testpaths =
    tests
    integration
",
  "ruff.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

cache-dir = ".cache/.ruff_cache"
show-fixes = true
src = [ "src", "tests" ]
target-version = "py313"
unsafe-fixes = false

[format]
docstring-code-format = true

[lint]
ignore = [ "rule3" ]
select = [ "rule1", "rule2" ]
per-file-ignores = { }

  [lint.mccabe]
  max-complexity = 14
",
}
`;

exports[`PythonBasicProject PythonBasicProject synthesizes correctly with minimum configuration 1`] = `
{
  ".coveragerc": "[run]
branch = true
omit = 
  

[report]
fail_under = 80
format = text
skip_empty = true
skip_covered = false",
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

* text=auto eol=lf",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
!/Makefile-projen
!/.nvmrc
!/mypy.ini
.mypy_cache
!/ruff.toml
.ruff_cache
.audit_cache
!/pytest.ini
!/.coveragerc
.coverage
.pytest_cache
!/pyproject.toml
.venv/
*.egg-info
build
*.pyc
__pycache__
.cache
!/.python-version
.ipynb_checkpoints
!/.projenrc.py
",
  ".nvmrc": "20.16.0",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "dependencies": [
      {
        "name": "mypy",
        "type": "devenv",
        "version": "1.14.*",
      },
      {
        "name": "pip-audit",
        "type": "devenv",
        "version": "2.*",
      },
      {
        "name": "pip-tools",
        "type": "devenv",
        "version": "7.4.1",
      },
      {
        "name": "projen",
        "type": "devenv",
        "version": "99.99.99",
      },
      {
        "name": "pytest-cov",
        "type": "devenv",
        "version": "6.0.*",
      },
      {
        "name": "pytest",
        "type": "devenv",
        "version": "8.3.*",
      },
      {
        "name": "ruff",
        "type": "devenv",
        "version": "0.8.*",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "files": [
      ".coveragerc",
      ".gitattributes",
      ".gitignore",
      ".nvmrc",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
      ".python-version",
      "Makefile-projen",
      "mypy.ini",
      "pyproject.toml",
      "pytest.ini",
      "ruff.toml",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".",
    "env": {
      "VENV_PATH": ".venv",
    },
    "tasks": {
      "build": {
        "description": "Build project (install -> compile -> package)",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "install",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Compile project",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
        "steps": [
          {
            "exec": ".venv/bin/python .projenrc.py",
          },
        ],
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install project dependencies",
        "name": "install",
        "steps": [
          {
            "spawn": "install-dev",
          },
        ],
      },
      "install-dev": {
        "description": "Install dependencies from constraints-dev.txt (including dev deps)",
        "name": "install-dev",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints-dev.txt --editable .[dev]",
          },
        ],
      },
      "lint": {
        "description": "Lint project (code style, formatting, audit, code smells etc)",
        "name": "lint",
        "steps": [
          {
            "spawn": "lint-mypy",
          },
          {
            "spawn": "lint-ruff",
          },
          {
            "spawn": "lint-audit",
          },
        ],
      },
      "lint-audit": {
        "description": "Code type checks (mypy)",
        "name": "lint-audit",
        "steps": [
          {
            "exec": ".venv/bin/pip-audit --cache-dir .cache/.audit_cache",
          },
        ],
      },
      "lint-fix": {
        "description": "Fix auto fixable lint issues",
        "name": "lint-fix",
        "steps": [
          {
            "spawn": "lint-ruff-fix",
          },
        ],
      },
      "lint-mypy": {
        "description": "Code type checks (mypy)",
        "name": "lint-mypy",
        "steps": [
          {
            "exec": ".venv/bin/mypy src tests",
          },
        ],
      },
      "lint-ruff": {
        "description": "Code checks (RUFF)",
        "name": "lint-ruff",
        "steps": [
          {
            "exec": ".venv/bin/ruff format --check src tests",
          },
          {
            "exec": ".venv/bin/ruff check src tests",
          },
        ],
      },
      "lint-ruff-fix": {
        "description": "Lint fix (RUFF)",
        "name": "lint-ruff-fix",
        "steps": [
          {
            "exec": ".venv/bin/ruff format src tests",
          },
          {
            "exec": ".venv/bin/ruff check --fix src tests",
          },
        ],
      },
      "package": {
        "description": "Prepare a distributable package",
        "name": "package",
      },
      "prepare-venv": {
        "description": "Create python virtual environment in .venv",
        "name": "prepare-venv",
        "steps": [
          {
            "exec": "python -m venv .venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.13",
          },
        ],
      },
      "release": {
        "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
        "name": "release",
        "steps": [
          {
            "spawn": "release:before",
          },
          {
            "spawn": "release:next-tag",
          },
          {
            "spawn": "release:generate",
          },
          {
            "spawn": "release:after",
          },
        ],
      },
      "release:after": {
        "description": "Executed after all release tasks. Placeholder for customizations",
        "name": "release:after",
      },
      "release:before": {
        "description": "Executed before any release tasks. Placeholder for customizations",
        "name": "release:before",
      },
      "release:generate": {
        "description": "Generates documentation, special files etc. Placeholder for customizations",
        "name": "release:generate",
      },
      "release:next-tag": {
        "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"",
        "name": "release:next-tag",
        "steps": [
          {
            "exec": "npx -y monotag@1.15.1 notes ",
          },
        ],
      },
      "release:pre": {
        "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
        "name": "release:pre",
        "steps": [
          {
            "spawn": "release:pre:before",
          },
          {
            "spawn": "release:pre:next-tag",
          },
          {
            "spawn": "release:pre:generate",
          },
          {
            "spawn": "release:pre:after",
          },
        ],
      },
      "release:pre:after": {
        "description": "Executed after all release tasks. Placeholder for customizations",
        "name": "release:pre:after",
      },
      "release:pre:before": {
        "description": "Executed before any release tasks. Placeholder for customizations",
        "name": "release:pre:before",
      },
      "release:pre:generate": {
        "description": "Generates documentation, special files etc. Placeholder for customizations",
        "name": "release:pre:generate",
      },
      "release:pre:next-tag": {
        "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"",
        "name": "release:pre:next-tag",
        "steps": [
          {
            "exec": "npx -y monotag@1.15.1 notes --prerelease="true"",
          },
        ],
      },
      "test": {
        "description": "Test project",
        "name": "test",
        "steps": [
          {
            "spawn": "test-unit",
          },
        ],
      },
      "test-unit": {
        "description": "Unit tests (pytest)",
        "name": "test-unit",
        "steps": [
          {
            "exec": ".venv/bin/pytest",
          },
        ],
      },
      "update-lockfile": {
        "description": "Update lock file (constraints.txt) according to pyproject.toml",
        "name": "update-lockfile",
        "steps": [
          {
            "say": "Prepare venv",
            "spawn": "prepare-venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=constraints.txt pyproject.toml",
            "say": "Updating lock file (runtime)",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=constraints-dev.txt pyproject.toml",
            "say": "Updating lock file (dev)",
          },
        ],
      },
    },
  },
  ".python-version": "3.12",
  "Makefile": "SHELL := /bin/bash

## Inherit targets from another Makefile
%:
	make -f Makefile-projen $@

dev-sample:
	@echo "This is a sample target. Edit the Makefile to add your own targets."

",
  "Makefile-projen": "SHELL := /bin/bash

all: build lint test

prepare:
	brew install nvm
	@echo "Configure your shell following the instructions at https://formulae.brew.sh/formula/nvm"
  

prepare-projen:
	@if [ "$$CI" == "true" ]; then 		set -x; npm install --no-save --no-package-lock ts-node@10.9.2 projen@0.91.13; 	else 		set -x; npm install --no-save ts-node@10.9.2 projen@0.91.13; 	fi

# Remove projen from the project
eject:
	npx projen eject

# Build project (install -> compile -> package)
build:
	npx projen build

# Install project dependencies
install:
	npx projen install

# Compile project
compile:
	npx projen compile

# Prepare a distributable package
package:
	npx projen package

# Lint project (code style, formatting, audit, code smells etc)
lint:
	npx projen lint

# Fix auto fixable lint issues
lint-fix:
	npx projen lint-fix

# Test project
test:
	npx projen test

# Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.
release:
	npx projen release

# Executed before any release tasks. Placeholder for customizations
release-before:
	npx projen release:before

# Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using "npx monotag"
release-next-tag:
	npx projen release:next-tag

# Generates documentation, special files etc. Placeholder for customizations
release-generate:
	npx projen release:generate

# Executed after all release tasks. Placeholder for customizations
release-after:
	npx projen release:after

# Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.
release-pre:
	npx projen release:pre

# Code type checks (mypy)
lint-mypy:
	npx projen lint-mypy

# Code checks (RUFF)
lint-ruff:
	npx projen lint-ruff

# Lint fix (RUFF)
lint-ruff-fix:
	npx projen lint-ruff-fix

# Code type checks (mypy)
lint-audit:
	npx projen lint-audit

# Unit tests (pytest)
test-unit:
	npx projen test-unit

# Install dependencies from constraints-dev.txt (including dev deps)
install-dev:
	npx projen install-dev

# Create python virtual environment in .venv
prepare-venv:
	npx projen prepare-venv

# Update lock file (constraints.txt) according to pyproject.toml
update-lockfile:
	npx projen update-lockfile

",
  "mypy.ini": "[mypy]
mypy_path = 
    src
    tests
warn_return_any = True
warn_unreachable = True
warn_redundant_casts = True
warn_unused_ignores = True
pretty = True
cache_dir = .cache/.mypy_cache
",
  "pyproject.toml": "[build-system]
requires = [ "setuptools" ]
build-backend = "setuptools.build_meta"

[project]
name = "test-project"
version = "0.0.1"
description = ""
readme = ""
requires-python = ">=3.12"
license = { file = "LICENSE" }
keywords = [ ]
dependencies = [
  "mypy==1.14.*",
  "pip-audit==2.*",
  "pip-tools==7.4.1",
  "projen==99.99.99",
  "pytest-cov==6.0.*",
  "pytest==8.3.*",
  "ruff==0.8.*"
]

[project.optional-dependencies]
dev = [ ]

[tool.setuptools.package-data]
test-project = [ "py.typed" ]
",
  "pytest.ini": "[pytest]
cache_dir = .cache/.pytest_cache
addopts = --cov=src --verbose
testpaths =
    tests
    integration
",
  "ruff.toml": "# ~~ Generated by projen. To modify, edit .projenrc.py and run "npx projen".

cache-dir = ".cache/.ruff_cache"
show-fixes = true
src = [ "src", "tests" ]
target-version = "py313"
unsafe-fixes = false

[format]
docstring-code-format = true

[lint]
ignore = [ ]
select = [ ]
per-file-ignores = { }

  [lint.mccabe]
  max-complexity = 14
",
  "src/hello_world/__init__.py": "",
  "src/hello_world/hello.py": """"Says hello to the given name."""
def say(name: str) -> str:
              """Return a greeting message.
              Args:
                  name (str): Name to greet.
              Returns:
                  str: greeting message
              """
              return f"Hello {name}!"
          ",
  "src/hello_world/py.typed": "",
  "tests/hello_world/test_hello_world.py": "from hello_world import hello

def test_hello_with_name():
    assert hello.say("Alice") == "Hello Alice!"

def test_hello_with_empty_string():
    assert hello.say("") == "Hello !"

def test_hello_with_special_characters():
    assert hello.say("!@#$") == "Hello !@#$!"
          ",
}
`;
