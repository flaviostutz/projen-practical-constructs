// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pip snapshot of default options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

* text=auto eol=lf",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.venv/
*.egg-info
build
*.pyc
__pycache__
.cache
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "pip-tools",
        "type": "devenv",
        "version": "7.4.1",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "VENV_PATH": ".venv",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install dependencies from constraints.txt",
        "name": "install",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints.txt",
          },
        ],
      },
      "install-dev": {
        "description": "Install dependencies from constraints-dev.txt",
        "name": "install-dev",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints-dev.txt --editable .[dev]",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "prepare-venv": {
        "description": "Create python virtual environment in .venv",
        "name": "prepare-venv",
        "steps": [
          {
            "exec": "python -m venv .venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.6",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "update-lockfile": {
        "description": "Update lock file (constraints.txt) according to pyproject.toml",
        "name": "update-lockfile",
        "steps": [
          {
            "say": "Prepare venv",
            "spawn": "prepare-venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=constraints.txt pyproject.toml",
            "say": "Updating lock file (runtime)",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=constraints-dev.txt pyproject.toml",
            "say": "Updating lock file (dev)",
          },
        ],
      },
    },
  },
}
`;

exports[`Pip snapshot with another set of custom options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

* text=auto eol=lf",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.another_venv/
*.egg-info
build
*.pyc
__pycache__
.cache
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "pip-tools",
        "type": "devenv",
        "version": "7.4.1",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "VENV_PATH": ".another_venv",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install dependencies from another_requirements.txt",
        "name": "install",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c another_requirements.txt",
          },
        ],
      },
      "install-dev": {
        "description": "Install dependencies from dev_requirements.txt",
        "name": "install-dev",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c dev_requirements.txt --editable .[dev]",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "prepare-venv": {
        "description": "Create python virtual environment in .another_venv",
        "name": "prepare-venv",
        "steps": [
          {
            "exec": "python -m venv .another_venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.6",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "update-lockfile": {
        "description": "Update lock file (another_requirements.txt) according to pyproject.toml",
        "name": "update-lockfile",
        "steps": [
          {
            "say": "Prepare venv",
            "spawn": "prepare-venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=another_requirements.txt pyproject.toml",
            "say": "Updating lock file (runtime)",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=dev_requirements.txt pyproject.toml",
            "say": "Updating lock file (dev)",
          },
        ],
      },
    },
  },
}
`;

exports[`Pip snapshot with custom options 1`] = `
{
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

* text=auto eol=lf",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".
node_modules/
!/.gitattributes
!/.projen/tasks.json
!/.projen/deps.json
!/.projen/files.json
.custom_venv/
*.egg-info
build
*.pyc
__pycache__
.cache
",
  ".projen/deps.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "dependencies": [
      {
        "name": "pip-tools",
        "type": "devenv",
        "version": "7.4.1",
      },
    ],
  },
  ".projen/files.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "files": [
      ".gitattributes",
      ".gitignore",
      ".projen/deps.json",
      ".projen/files.json",
      ".projen/tasks.json",
    ],
  },
  ".projen/tasks.json": {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".",
    "env": {
      "VENV_PATH": ".custom_venv",
    },
    "tasks": {
      "build": {
        "description": "Full release build",
        "name": "build",
        "steps": [
          {
            "spawn": "default",
          },
          {
            "spawn": "pre-compile",
          },
          {
            "spawn": "compile",
          },
          {
            "spawn": "post-compile",
          },
          {
            "spawn": "test",
          },
          {
            "spawn": "package",
          },
        ],
      },
      "compile": {
        "description": "Only compile",
        "name": "compile",
      },
      "default": {
        "description": "Synthesize project files",
        "name": "default",
      },
      "eject": {
        "description": "Remove projen from the project",
        "env": {
          "PROJEN_EJECTING": "true",
        },
        "name": "eject",
        "steps": [
          {
            "spawn": "default",
          },
        ],
      },
      "install": {
        "description": "Install dependencies from custom_requirements.txt",
        "name": "install",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c custom_requirements.txt",
          },
        ],
      },
      "install-dev": {
        "description": "Install dependencies from constraints-dev.txt",
        "name": "install-dev",
        "steps": [
          {
            "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints-dev.txt --editable .[dev]",
          },
        ],
      },
      "package": {
        "description": "Creates the distribution package",
        "name": "package",
      },
      "post-compile": {
        "description": "Runs after successful compilation",
        "name": "post-compile",
      },
      "pre-compile": {
        "description": "Prepare the project for compilation",
        "name": "pre-compile",
      },
      "prepare-venv": {
        "description": "Create python virtual environment in .custom_venv",
        "name": "prepare-venv",
        "steps": [
          {
            "exec": "python -m venv .custom_venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.6",
          },
        ],
      },
      "test": {
        "description": "Run tests",
        "name": "test",
      },
      "update-lockfile": {
        "description": "Update lock file (custom_requirements.txt) according to pyproject.toml",
        "name": "update-lockfile",
        "steps": [
          {
            "say": "Prepare venv",
            "spawn": "prepare-venv",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=custom_requirements.txt pyproject.toml",
            "say": "Updating lock file (runtime)",
          },
          {
            "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=constraints-dev.txt pyproject.toml",
            "say": "Updating lock file (dev)",
          },
        ],
      },
    },
  },
}
`;
