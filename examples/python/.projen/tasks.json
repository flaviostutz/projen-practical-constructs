{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Build project (install -> compile -> package)",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "install"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Compile project"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": ".venv/bin/python .projenrc.py"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies",
      "steps": [
        {
          "spawn": "install-dev"
        }
      ]
    },
    "install-dev": {
      "name": "install-dev",
      "description": "Install dependencies from constraints-dev.txt (including dev deps)",
      "steps": [
        {
          "exec": "$VENV_PATH/bin/pip install --require-virtualenv -c constraints-dev.txt --editable .[dev]"
        }
      ]
    },
    "lint": {
      "name": "lint",
      "description": "Lint project (code style, formatting, audit, code smells etc)",
      "steps": [
        {
          "spawn": "lint-mypy"
        },
        {
          "spawn": "lint-ruff"
        },
        {
          "spawn": "lint-audit"
        }
      ]
    },
    "lint-audit": {
      "name": "lint-audit",
      "description": "Code type checks (mypy)",
      "steps": [
        {
          "exec": ".venv/bin/pip-audit --cache-dir .cache/.audit_cache"
        }
      ]
    },
    "lint-fix": {
      "name": "lint-fix",
      "description": "Fix auto fixable lint issues",
      "steps": [
        {
          "spawn": "lint-ruff-fix"
        }
      ]
    },
    "lint-mypy": {
      "name": "lint-mypy",
      "description": "Code type checks (mypy)",
      "steps": [
        {
          "exec": ".venv/bin/mypy src tests"
        }
      ]
    },
    "lint-ruff": {
      "name": "lint-ruff",
      "description": "Code checks (RUFF)",
      "steps": [
        {
          "exec": ".venv/bin/ruff format --check src tests"
        },
        {
          "exec": ".venv/bin/ruff check src tests"
        }
      ]
    },
    "lint-ruff-fix": {
      "name": "lint-ruff-fix",
      "description": "Lint fix (RUFF)",
      "steps": [
        {
          "exec": ".venv/bin/ruff format src tests"
        },
        {
          "exec": ".venv/bin/ruff check --fix src tests"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Prepare a distributable package"
    },
    "prepare-venv": {
      "name": "prepare-venv",
      "description": "Create python virtual environment in .venv",
      "steps": [
        {
          "exec": "python -m venv .venv"
        },
        {
          "exec": "$VENV_PATH/bin/pip install pip-tools==7.4.1 projen==0.91.13"
        }
      ]
    },
    "release": {
      "name": "release",
      "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
      "steps": [
        {
          "spawn": "release:before"
        },
        {
          "spawn": "release:next-tag"
        },
        {
          "spawn": "release:generate"
        },
        {
          "spawn": "release:after"
        }
      ]
    },
    "release:after": {
      "name": "release:after",
      "description": "Executed after all release tasks. Placeholder for customizations"
    },
    "release:before": {
      "name": "release:before",
      "description": "Executed before any release tasks. Placeholder for customizations"
    },
    "release:generate": {
      "name": "release:generate",
      "description": "Generates documentation, special files etc. Placeholder for customizations"
    },
    "release:next-tag": {
      "name": "release:next-tag",
      "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using \"npx monotag\"",
      "steps": [
        {
          "exec": "npx -y monotag@1.15.1 notes --prerelease-identifier=\"rc\""
        }
      ]
    },
    "release:pre": {
      "name": "release:pre",
      "description": "Release a new version by calculating next tag/version, generating changelogs, documentation, commiting, tagging and pushing these changes/tag to the repo.",
      "steps": [
        {
          "spawn": "release:pre:before"
        },
        {
          "spawn": "release:pre:next-tag"
        },
        {
          "spawn": "release:pre:generate"
        },
        {
          "spawn": "release:pre:after"
        }
      ]
    },
    "release:pre:after": {
      "name": "release:pre:after",
      "description": "Executed after all release tasks. Placeholder for customizations"
    },
    "release:pre:before": {
      "name": "release:pre:before",
      "description": "Executed before any release tasks. Placeholder for customizations"
    },
    "release:pre:generate": {
      "name": "release:pre:generate",
      "description": "Generates documentation, special files etc. Placeholder for customizations"
    },
    "release:pre:next-tag": {
      "name": "release:pre:next-tag",
      "description": "Calculate next tag and version of the software and display on console. No git operations are performed, but depending on the configurations, changelog, version, tag an notes might be written to files. Supports complex release tagging in monorepos by using \"npx monotag\"",
      "steps": [
        {
          "exec": "npx -y monotag@1.15.1 notes --prerelease=\"true\" --prerelease-identifier=\"rc\""
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Test project",
      "steps": [
        {
          "spawn": "test-unit"
        }
      ]
    },
    "test-unit": {
      "name": "test-unit",
      "description": "Unit tests (pytest)",
      "steps": [
        {
          "exec": ".venv/bin/pytest"
        }
      ]
    },
    "update-lockfile": {
      "name": "update-lockfile",
      "description": "Update lock file (constraints.txt) according to pyproject.toml",
      "steps": [
        {
          "say": "Prepare venv",
          "spawn": "prepare-venv"
        },
        {
          "say": "Updating lock file (runtime)",
          "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --output-file=constraints.txt pyproject.toml"
        },
        {
          "say": "Updating lock file (dev)",
          "exec": "$VENV_PATH/bin/pip-compile --all-build-deps --extra dev --strip-extras --output-file=constraints-dev.txt pyproject.toml"
        }
      ]
    }
  },
  "env": {
    "VENV_PATH": ".venv"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \"npx projen\"."
}
